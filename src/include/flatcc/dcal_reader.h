#ifndef DCAL_READER_H
#define DCAL_READER_H

/* Generated by flatcc 0.4.3 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct DCAL_session_Handshake_table *DCAL_session_Handshake_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Handshake_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Handshake_mutable_vec_t;
typedef const struct DCAL_session_Event_table *DCAL_session_Event_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Event_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Event_mutable_vec_t;
typedef const struct DCAL_session_U32_table *DCAL_session_U32_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_U32_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_U32_mutable_vec_t;
typedef const struct DCAL_session_String_table *DCAL_session_String_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_String_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_String_mutable_vec_t;
typedef const struct DCAL_session_Status_table *DCAL_session_Status_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Status_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Status_mutable_vec_t;
typedef const struct DCAL_session_Version_table *DCAL_session_Version_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Version_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Version_mutable_vec_t;
typedef const struct DCAL_session_Globals_table *DCAL_session_Globals_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Globals_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Globals_mutable_vec_t;
typedef const struct DCAL_session_Profile_table *DCAL_session_Profile_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Profile_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Profile_mutable_vec_t;
typedef const struct DCAL_session_Interface_table *DCAL_session_Interface_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Interface_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Interface_mutable_vec_t;
typedef const struct DCAL_session_Lease_table *DCAL_session_Lease_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Lease_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Lease_mutable_vec_t;
typedef const struct DCAL_session_Default_route_table *DCAL_session_Default_route_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Default_route_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Default_route_mutable_vec_t;
typedef const struct DCAL_session_P_entry_table *DCAL_session_P_entry_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_P_entry_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_P_entry_mutable_vec_t;
typedef const struct DCAL_session_Profile_list_table *DCAL_session_Profile_list_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Profile_list_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Profile_list_mutable_vec_t;
typedef const struct DCAL_session_Scan_item_table *DCAL_session_Scan_item_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Scan_item_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Scan_item_mutable_vec_t;
typedef const struct DCAL_session_Scan_list_table *DCAL_session_Scan_list_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Scan_list_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Scan_list_mutable_vec_t;
typedef const struct DCAL_session_Time_table *DCAL_session_Time_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Time_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Time_mutable_vec_t;
typedef const struct DCAL_session_Filexfer_table *DCAL_session_Filexfer_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Filexfer_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Filexfer_mutable_vec_t;
typedef const struct DCAL_session_Command_table *DCAL_session_Command_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Command_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Command_mutable_vec_t;

typedef uint32_t DCAL_session_Magic_enum_t;
__flatbuffers_define_integer_type(DCAL_session_Magic, DCAL_session_Magic_enum_t, 32)
#define DCAL_session_Magic_INVALID ((DCAL_session_Magic_enum_t)UINT32_C(0))
#define DCAL_session_Magic_HELLO ((DCAL_session_Magic_enum_t)UINT32_C(123))
#define DCAL_session_Magic_NACK ((DCAL_session_Magic_enum_t)UINT32_C(404))
#define DCAL_session_Magic_ACK ((DCAL_session_Magic_enum_t)UINT32_C(555))

static inline const char *DCAL_session_Magic_name(DCAL_session_Magic_enum_t value)
{
    switch (value) {
    case DCAL_session_Magic_INVALID: return "INVALID";
    case DCAL_session_Magic_HELLO: return "HELLO";
    case DCAL_session_Magic_NACK: return "NACK";
    case DCAL_session_Magic_ACK: return "ACK";
    default: return "";
    }
}

typedef uint32_t DCAL_session_Commands_enum_t;
__flatbuffers_define_integer_type(DCAL_session_Commands, DCAL_session_Commands_enum_t, 32)
#define DCAL_session_Commands_INVALID ((DCAL_session_Commands_enum_t)UINT32_C(0))
#define DCAL_session_Commands_GETVERSIONS ((DCAL_session_Commands_enum_t)UINT32_C(1))
#define DCAL_session_Commands_GETSTATUS ((DCAL_session_Commands_enum_t)UINT32_C(2))
#define DCAL_session_Commands_GETGLOBALS ((DCAL_session_Commands_enum_t)UINT32_C(3))
#define DCAL_session_Commands_SETGLOBALS ((DCAL_session_Commands_enum_t)UINT32_C(4))
#define DCAL_session_Commands_GETPROFILE ((DCAL_session_Commands_enum_t)UINT32_C(5))
#define DCAL_session_Commands_SETPROFILE ((DCAL_session_Commands_enum_t)UINT32_C(6))
#define DCAL_session_Commands_DELPROFILE ((DCAL_session_Commands_enum_t)UINT32_C(7))
#define DCAL_session_Commands_GETPROFILELIST ((DCAL_session_Commands_enum_t)UINT32_C(8))
#define DCAL_session_Commands_GETSCANLIST ((DCAL_session_Commands_enum_t)UINT32_C(9))
#define DCAL_session_Commands_ACTIVATEPROFILE ((DCAL_session_Commands_enum_t)UINT32_C(10))
#define DCAL_session_Commands_GETINTERFACE ((DCAL_session_Commands_enum_t)UINT32_C(11))
#define DCAL_session_Commands_SETINTERFACE ((DCAL_session_Commands_enum_t)UINT32_C(12))
#define DCAL_session_Commands_DELINTERFACE ((DCAL_session_Commands_enum_t)UINT32_C(13))
#define DCAL_session_Commands_GETLEASE ((DCAL_session_Commands_enum_t)UINT32_C(14))
#define DCAL_session_Commands_GETDEFAULTROUTE ((DCAL_session_Commands_enum_t)UINT32_C(15))
#define DCAL_session_Commands_WIFIENABLE ((DCAL_session_Commands_enum_t)UINT32_C(16))
#define DCAL_session_Commands_WIFIDISABLE ((DCAL_session_Commands_enum_t)UINT32_C(17))
#define DCAL_session_Commands_WIFIRESTART ((DCAL_session_Commands_enum_t)UINT32_C(18))
#define DCAL_session_Commands_SYSTEMREBOOT ((DCAL_session_Commands_enum_t)UINT32_C(19))
#define DCAL_session_Commands_SETTIME ((DCAL_session_Commands_enum_t)UINT32_C(20))
#define DCAL_session_Commands_GETTIME ((DCAL_session_Commands_enum_t)UINT32_C(21))
#define DCAL_session_Commands_NTPDATE ((DCAL_session_Commands_enum_t)UINT32_C(22))
#define DCAL_session_Commands_FILEPUSH ((DCAL_session_Commands_enum_t)UINT32_C(23))
#define DCAL_session_Commands_FILEPULL ((DCAL_session_Commands_enum_t)UINT32_C(24))
#define DCAL_session_Commands_FWUPDATE ((DCAL_session_Commands_enum_t)UINT32_C(25))
#define DCAL_session_Commands_CLIFILE ((DCAL_session_Commands_enum_t)UINT32_C(26))
#define DCAL_session_Commands_GETLOGS ((DCAL_session_Commands_enum_t)UINT32_C(27))

static inline const char *DCAL_session_Commands_name(DCAL_session_Commands_enum_t value)
{
    switch (value) {
    case DCAL_session_Commands_INVALID: return "INVALID";
    case DCAL_session_Commands_GETVERSIONS: return "GETVERSIONS";
    case DCAL_session_Commands_GETSTATUS: return "GETSTATUS";
    case DCAL_session_Commands_GETGLOBALS: return "GETGLOBALS";
    case DCAL_session_Commands_SETGLOBALS: return "SETGLOBALS";
    case DCAL_session_Commands_GETPROFILE: return "GETPROFILE";
    case DCAL_session_Commands_SETPROFILE: return "SETPROFILE";
    case DCAL_session_Commands_DELPROFILE: return "DELPROFILE";
    case DCAL_session_Commands_GETPROFILELIST: return "GETPROFILELIST";
    case DCAL_session_Commands_GETSCANLIST: return "GETSCANLIST";
    case DCAL_session_Commands_ACTIVATEPROFILE: return "ACTIVATEPROFILE";
    case DCAL_session_Commands_GETINTERFACE: return "GETINTERFACE";
    case DCAL_session_Commands_SETINTERFACE: return "SETINTERFACE";
    case DCAL_session_Commands_DELINTERFACE: return "DELINTERFACE";
    case DCAL_session_Commands_GETLEASE: return "GETLEASE";
    case DCAL_session_Commands_GETDEFAULTROUTE: return "GETDEFAULTROUTE";
    case DCAL_session_Commands_WIFIENABLE: return "WIFIENABLE";
    case DCAL_session_Commands_WIFIDISABLE: return "WIFIDISABLE";
    case DCAL_session_Commands_WIFIRESTART: return "WIFIRESTART";
    case DCAL_session_Commands_SYSTEMREBOOT: return "SYSTEMREBOOT";
    case DCAL_session_Commands_SETTIME: return "SETTIME";
    case DCAL_session_Commands_GETTIME: return "GETTIME";
    case DCAL_session_Commands_NTPDATE: return "NTPDATE";
    case DCAL_session_Commands_FILEPUSH: return "FILEPUSH";
    case DCAL_session_Commands_FILEPULL: return "FILEPULL";
    case DCAL_session_Commands_FWUPDATE: return "FWUPDATE";
    case DCAL_session_Commands_CLIFILE: return "CLIFILE";
    case DCAL_session_Commands_GETLOGS: return "GETLOGS";
    default: return "";
    }
}



struct DCAL_session_Handshake_table { uint8_t unused__; };

#ifndef DCAL_session_Handshake_identifier
#define DCAL_session_Handshake_identifier flatbuffers_identifier
#endif
#define DCAL_session_Handshake_type_hash ((flatbuffers_thash_t)0xe7ee4310)
#define DCAL_session_Handshake_type_identifier "\x10\x43\xee\xe7"
static inline size_t DCAL_session_Handshake_vec_len(DCAL_session_Handshake_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Handshake_table_t DCAL_session_Handshake_vec_at(DCAL_session_Handshake_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Handshake_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Handshake)

__flatbuffers_define_scalar_field(0, DCAL_session_Handshake, server, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, DCAL_session_Handshake, magic, DCAL_session_Magic, DCAL_session_Magic_enum_t, UINT32_C(0))
__flatbuffers_define_string_field(2, DCAL_session_Handshake, ip, 0)
__flatbuffers_define_scalar_field(3, DCAL_session_Handshake, api_level, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(4, DCAL_session_Handshake, error, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct DCAL_session_Event_table { uint8_t unused__; };

#ifndef DCAL_session_Event_identifier
#define DCAL_session_Event_identifier flatbuffers_identifier
#endif
#define DCAL_session_Event_type_hash ((flatbuffers_thash_t)0x5b8cb5d)
#define DCAL_session_Event_type_identifier "\x5d\xcb\xb8\x05"
static inline size_t DCAL_session_Event_vec_len(DCAL_session_Event_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Event_table_t DCAL_session_Event_vec_at(DCAL_session_Event_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Event_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Event)

__flatbuffers_define_scalar_field(0, DCAL_session_Event, e_type, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(1, DCAL_session_Event, status, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(2, DCAL_session_Event, reason, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(3, DCAL_session_Event, eth_addr, 0)
__flatbuffers_define_scalar_field(4, DCAL_session_Event, flags, flatbuffers_uint16, uint16_t, UINT16_C(0))

struct DCAL_session_U32_table { uint8_t unused__; };

#ifndef DCAL_session_U32_identifier
#define DCAL_session_U32_identifier flatbuffers_identifier
#endif
#define DCAL_session_U32_type_hash ((flatbuffers_thash_t)0xdc0a1f1f)
#define DCAL_session_U32_type_identifier "\x1f\x1f\x0a\xdc"
static inline size_t DCAL_session_U32_vec_len(DCAL_session_U32_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_U32_table_t DCAL_session_U32_vec_at(DCAL_session_U32_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_U32_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_U32)

__flatbuffers_define_scalar_field(0, DCAL_session_U32, value, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct DCAL_session_String_table { uint8_t unused__; };

#ifndef DCAL_session_String_identifier
#define DCAL_session_String_identifier flatbuffers_identifier
#endif
#define DCAL_session_String_type_hash ((flatbuffers_thash_t)0x67907baa)
#define DCAL_session_String_type_identifier "\xaa\x7b\x90\x67"
static inline size_t DCAL_session_String_vec_len(DCAL_session_String_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_String_table_t DCAL_session_String_vec_at(DCAL_session_String_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_String_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_String)

__flatbuffers_define_string_field(0, DCAL_session_String, value, 0)

struct DCAL_session_Status_table { uint8_t unused__; };

#ifndef DCAL_session_Status_identifier
#define DCAL_session_Status_identifier flatbuffers_identifier
#endif
#define DCAL_session_Status_type_hash ((flatbuffers_thash_t)0xa5becae9)
#define DCAL_session_Status_type_identifier "\xe9\xca\xbe\xa5"
static inline size_t DCAL_session_Status_vec_len(DCAL_session_Status_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Status_table_t DCAL_session_Status_vec_at(DCAL_session_Status_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Status_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Status)

__flatbuffers_define_scalar_field(0, DCAL_session_Status, cardState, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(1, DCAL_session_Status, ProfileName, 0)
__flatbuffers_define_vector_field(2, DCAL_session_Status, ssid, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_scalar_field(3, DCAL_session_Status, channel, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(4, DCAL_session_Status, rssi, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_string_field(5, DCAL_session_Status, clientName, 0)
__flatbuffers_define_vector_field(6, DCAL_session_Status, mac, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(7, DCAL_session_Status, ip, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(8, DCAL_session_Status, ipv6, flatbuffers_string_vec_t, 0)
__flatbuffers_define_vector_field(9, DCAL_session_Status, AP_mac, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(10, DCAL_session_Status, AP_ip, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_string_field(11, DCAL_session_Status, AP_name, 0)
__flatbuffers_define_scalar_field(12, DCAL_session_Status, bitRate, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(13, DCAL_session_Status, txPower, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(14, DCAL_session_Status, dtim, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(15, DCAL_session_Status, beaconPeriod, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(16, DCAL_session_Status, numipv6addrs, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct DCAL_session_Version_table { uint8_t unused__; };

#ifndef DCAL_session_Version_identifier
#define DCAL_session_Version_identifier flatbuffers_identifier
#endif
#define DCAL_session_Version_type_hash ((flatbuffers_thash_t)0x23ca9341)
#define DCAL_session_Version_type_identifier "\x41\x93\xca\x23"
static inline size_t DCAL_session_Version_vec_len(DCAL_session_Version_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Version_table_t DCAL_session_Version_vec_at(DCAL_session_Version_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Version_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Version)

__flatbuffers_define_scalar_field(0, DCAL_session_Version, sdk, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(1, DCAL_session_Version, chipset, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(2, DCAL_session_Version, sys, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(3, DCAL_session_Version, driver, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(4, DCAL_session_Version, firmware, 0)
__flatbuffers_define_string_field(5, DCAL_session_Version, supplicant, 0)
__flatbuffers_define_string_field(6, DCAL_session_Version, release, 0)
__flatbuffers_define_scalar_field(7, DCAL_session_Version, dcas, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct DCAL_session_Globals_table { uint8_t unused__; };

#ifndef DCAL_session_Globals_identifier
#define DCAL_session_Globals_identifier flatbuffers_identifier
#endif
#define DCAL_session_Globals_type_hash ((flatbuffers_thash_t)0x992f90f5)
#define DCAL_session_Globals_type_identifier "\xf5\x90\x2f\x99"
static inline size_t DCAL_session_Globals_vec_len(DCAL_session_Globals_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Globals_table_t DCAL_session_Globals_vec_at(DCAL_session_Globals_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Globals_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Globals)

__flatbuffers_define_scalar_field(0, DCAL_session_Globals, auth, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(1, DCAL_session_Globals, channel_set_a, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(2, DCAL_session_Globals, channel_set_b, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(3, DCAL_session_Globals, auto_profile, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(4, DCAL_session_Globals, beacon_miss, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(5, DCAL_session_Globals, ccx, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_string_field(6, DCAL_session_Globals, cert_path, 0)
__flatbuffers_define_scalar_field(7, DCAL_session_Globals, date_check, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(8, DCAL_session_Globals, def_adhoc, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(9, DCAL_session_Globals, fips, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(10, DCAL_session_Globals, pmk, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(11, DCAL_session_Globals, probe_delay, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(12, DCAL_session_Globals, regdomain, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(13, DCAL_session_Globals, roam_periodms, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(14, DCAL_session_Globals, roam_trigger, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(15, DCAL_session_Globals, rts, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(16, DCAL_session_Globals, scan_dfs, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(17, DCAL_session_Globals, ttls, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(18, DCAL_session_Globals, uapsd, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(19, DCAL_session_Globals, wmm, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(20, DCAL_session_Globals, ignore_null_ssid, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(21, DCAL_session_Globals, dfs_channels, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct DCAL_session_Profile_table { uint8_t unused__; };

#ifndef DCAL_session_Profile_identifier
#define DCAL_session_Profile_identifier flatbuffers_identifier
#endif
#define DCAL_session_Profile_type_hash ((flatbuffers_thash_t)0x2dcf2330)
#define DCAL_session_Profile_type_identifier "\x30\x23\xcf\x2d"
static inline size_t DCAL_session_Profile_vec_len(DCAL_session_Profile_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Profile_table_t DCAL_session_Profile_vec_at(DCAL_session_Profile_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Profile_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Profile)

__flatbuffers_define_string_field(0, DCAL_session_Profile, name, 0)
__flatbuffers_define_vector_field(1, DCAL_session_Profile, ssid, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_string_field(2, DCAL_session_Profile, client_name, 0)
__flatbuffers_define_scalar_field(3, DCAL_session_Profile, txPwr, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(4, DCAL_session_Profile, pwrsave, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(5, DCAL_session_Profile, pspDelay, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(6, DCAL_session_Profile, weptype, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(7, DCAL_session_Profile, auth, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(8, DCAL_session_Profile, eap, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(9, DCAL_session_Profile, bitrate, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(10, DCAL_session_Profile, radiomode, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(11, DCAL_session_Profile, security1, 0)
__flatbuffers_define_string_field(12, DCAL_session_Profile, security2, 0)
__flatbuffers_define_string_field(13, DCAL_session_Profile, security3, 0)
__flatbuffers_define_string_field(14, DCAL_session_Profile, security4, 0)
__flatbuffers_define_string_field(15, DCAL_session_Profile, security5, 0)
__flatbuffers_define_scalar_field(16, DCAL_session_Profile, weptxkey, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(17, DCAL_session_Profile, autoprofile, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct DCAL_session_Interface_table { uint8_t unused__; };

#ifndef DCAL_session_Interface_identifier
#define DCAL_session_Interface_identifier flatbuffers_identifier
#endif
#define DCAL_session_Interface_type_hash ((flatbuffers_thash_t)0x3d8c2c3e)
#define DCAL_session_Interface_type_identifier "\x3e\x2c\x8c\x3d"
static inline size_t DCAL_session_Interface_vec_len(DCAL_session_Interface_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Interface_table_t DCAL_session_Interface_vec_at(DCAL_session_Interface_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Interface_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Interface)

__flatbuffers_define_string_field(0, DCAL_session_Interface, interface_name, 0)
__flatbuffers_define_scalar_field(1, DCAL_session_Interface, prop, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(2, DCAL_session_Interface, ipv4, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_string_field(3, DCAL_session_Interface, method, 0)
__flatbuffers_define_scalar_field(4, DCAL_session_Interface, auto_start, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(5, DCAL_session_Interface, address, 0)
__flatbuffers_define_string_field(6, DCAL_session_Interface, netmask, 0)
__flatbuffers_define_string_field(7, DCAL_session_Interface, netmask6, 0)
__flatbuffers_define_string_field(8, DCAL_session_Interface, gateway, 0)
__flatbuffers_define_string_field(9, DCAL_session_Interface, broadcast, 0)
__flatbuffers_define_string_field(10, DCAL_session_Interface, nameserver, 0)
__flatbuffers_define_scalar_field(11, DCAL_session_Interface, state, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(12, DCAL_session_Interface, bridge, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(13, DCAL_session_Interface, ap_mode, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(14, DCAL_session_Interface, nat, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(15, DCAL_session_Interface, prop6, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(16, DCAL_session_Interface, ipv6, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_string_field(17, DCAL_session_Interface, method6, 0)
__flatbuffers_define_string_field(18, DCAL_session_Interface, dhcp6, 0)
__flatbuffers_define_string_field(19, DCAL_session_Interface, address6, 0)
__flatbuffers_define_string_field(20, DCAL_session_Interface, gateway6, 0)
__flatbuffers_define_string_field(21, DCAL_session_Interface, nameserver6, 0)
__flatbuffers_define_scalar_field(22, DCAL_session_Interface, state6, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(23, DCAL_session_Interface, nat6, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct DCAL_session_Lease_table { uint8_t unused__; };

#ifndef DCAL_session_Lease_identifier
#define DCAL_session_Lease_identifier flatbuffers_identifier
#endif
#define DCAL_session_Lease_type_hash ((flatbuffers_thash_t)0xdb741a73)
#define DCAL_session_Lease_type_identifier "\x73\x1a\x74\xdb"
static inline size_t DCAL_session_Lease_vec_len(DCAL_session_Lease_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Lease_table_t DCAL_session_Lease_vec_at(DCAL_session_Lease_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Lease_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Lease)

__flatbuffers_define_string_field(0, DCAL_session_Lease, interface, 0)
__flatbuffers_define_string_field(1, DCAL_session_Lease, address, 0)
__flatbuffers_define_string_field(2, DCAL_session_Lease, subnet_mask, 0)
__flatbuffers_define_string_field(3, DCAL_session_Lease, routers, 0)
__flatbuffers_define_scalar_field(4, DCAL_session_Lease, lease_time, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_scalar_field(5, DCAL_session_Lease, message_type, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(6, DCAL_session_Lease, dns_servers, 0)
__flatbuffers_define_string_field(7, DCAL_session_Lease, dhcp_server, 0)
__flatbuffers_define_string_field(8, DCAL_session_Lease, domain_name, 0)
__flatbuffers_define_string_field(9, DCAL_session_Lease, renew, 0)
__flatbuffers_define_string_field(10, DCAL_session_Lease, rebind, 0)
__flatbuffers_define_string_field(11, DCAL_session_Lease, expire, 0)

struct DCAL_session_Default_route_table { uint8_t unused__; };

#ifndef DCAL_session_Default_route_identifier
#define DCAL_session_Default_route_identifier flatbuffers_identifier
#endif
#define DCAL_session_Default_route_type_hash ((flatbuffers_thash_t)0xbeb749ee)
#define DCAL_session_Default_route_type_identifier "\xee\x49\xb7\xbe"
static inline size_t DCAL_session_Default_route_vec_len(DCAL_session_Default_route_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Default_route_table_t DCAL_session_Default_route_vec_at(DCAL_session_Default_route_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Default_route_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Default_route)

__flatbuffers_define_string_field(0, DCAL_session_Default_route, interface, 0)
__flatbuffers_define_string_field(1, DCAL_session_Default_route, destination, 0)
__flatbuffers_define_string_field(2, DCAL_session_Default_route, gateway, 0)
__flatbuffers_define_scalar_field(3, DCAL_session_Default_route, flags, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(4, DCAL_session_Default_route, metric, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_string_field(5, DCAL_session_Default_route, subnet_mask, 0)
__flatbuffers_define_scalar_field(6, DCAL_session_Default_route, mtu, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(7, DCAL_session_Default_route, window, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(8, DCAL_session_Default_route, irtt, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct DCAL_session_P_entry_table { uint8_t unused__; };

#ifndef DCAL_session_P_entry_identifier
#define DCAL_session_P_entry_identifier flatbuffers_identifier
#endif
#define DCAL_session_P_entry_type_hash ((flatbuffers_thash_t)0xf897aa7e)
#define DCAL_session_P_entry_type_identifier "\x7e\xaa\x97\xf8"
static inline size_t DCAL_session_P_entry_vec_len(DCAL_session_P_entry_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_P_entry_table_t DCAL_session_P_entry_vec_at(DCAL_session_P_entry_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_P_entry_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_P_entry)

__flatbuffers_define_string_field(0, DCAL_session_P_entry, name, 0)
__flatbuffers_define_scalar_field(1, DCAL_session_P_entry, active, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(2, DCAL_session_P_entry, autoprof, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct DCAL_session_Profile_list_table { uint8_t unused__; };

#ifndef DCAL_session_Profile_list_identifier
#define DCAL_session_Profile_list_identifier flatbuffers_identifier
#endif
#define DCAL_session_Profile_list_type_hash ((flatbuffers_thash_t)0xe6d21719)
#define DCAL_session_Profile_list_type_identifier "\x19\x17\xd2\xe6"
static inline size_t DCAL_session_Profile_list_vec_len(DCAL_session_Profile_list_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Profile_list_table_t DCAL_session_Profile_list_vec_at(DCAL_session_Profile_list_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Profile_list_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Profile_list)

__flatbuffers_define_vector_field(0, DCAL_session_Profile_list, profiles, DCAL_session_P_entry_vec_t, 0)

struct DCAL_session_Scan_item_table { uint8_t unused__; };

#ifndef DCAL_session_Scan_item_identifier
#define DCAL_session_Scan_item_identifier flatbuffers_identifier
#endif
#define DCAL_session_Scan_item_type_hash ((flatbuffers_thash_t)0xeae08c5c)
#define DCAL_session_Scan_item_type_identifier "\x5c\x8c\xe0\xea"
static inline size_t DCAL_session_Scan_item_vec_len(DCAL_session_Scan_item_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Scan_item_table_t DCAL_session_Scan_item_vec_at(DCAL_session_Scan_item_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Scan_item_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Scan_item)

__flatbuffers_define_scalar_field(0, DCAL_session_Scan_item, channel, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, DCAL_session_Scan_item, rssi, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, DCAL_session_Scan_item, securityMask, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(3, DCAL_session_Scan_item, bss, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_vector_field(4, DCAL_session_Scan_item, mac, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(5, DCAL_session_Scan_item, ssid, flatbuffers_uint8_vec_t, 0)

struct DCAL_session_Scan_list_table { uint8_t unused__; };

#ifndef DCAL_session_Scan_list_identifier
#define DCAL_session_Scan_list_identifier flatbuffers_identifier
#endif
#define DCAL_session_Scan_list_type_hash ((flatbuffers_thash_t)0x2b693cc3)
#define DCAL_session_Scan_list_type_identifier "\xc3\x3c\x69\x2b"
static inline size_t DCAL_session_Scan_list_vec_len(DCAL_session_Scan_list_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Scan_list_table_t DCAL_session_Scan_list_vec_at(DCAL_session_Scan_list_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Scan_list_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Scan_list)

__flatbuffers_define_vector_field(0, DCAL_session_Scan_list, items, DCAL_session_Scan_item_vec_t, 0)

struct DCAL_session_Time_table { uint8_t unused__; };

#ifndef DCAL_session_Time_identifier
#define DCAL_session_Time_identifier flatbuffers_identifier
#endif
#define DCAL_session_Time_type_hash ((flatbuffers_thash_t)0xce80618e)
#define DCAL_session_Time_type_identifier "\x8e\x61\x80\xce"
static inline size_t DCAL_session_Time_vec_len(DCAL_session_Time_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Time_table_t DCAL_session_Time_vec_at(DCAL_session_Time_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Time_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Time)

__flatbuffers_define_scalar_field(0, DCAL_session_Time, tv_sec, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(1, DCAL_session_Time, tv_usec, flatbuffers_int32, int32_t, INT32_C(0))

struct DCAL_session_Filexfer_table { uint8_t unused__; };

#ifndef DCAL_session_Filexfer_identifier
#define DCAL_session_Filexfer_identifier flatbuffers_identifier
#endif
#define DCAL_session_Filexfer_type_hash ((flatbuffers_thash_t)0xd295470c)
#define DCAL_session_Filexfer_type_identifier "\x0c\x47\x95\xd2"
static inline size_t DCAL_session_Filexfer_vec_len(DCAL_session_Filexfer_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Filexfer_table_t DCAL_session_Filexfer_vec_at(DCAL_session_Filexfer_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Filexfer_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Filexfer)

__flatbuffers_define_string_field(0, DCAL_session_Filexfer, file_path, 0)
__flatbuffers_define_scalar_field(1, DCAL_session_Filexfer, size, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, DCAL_session_Filexfer, mode, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_scalar_field(3, DCAL_session_Filexfer, cert, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
typedef uint8_t DCAL_session_Cmd_pl_union_type_t;
__flatbuffers_define_integer_type(DCAL_session_Cmd_pl, DCAL_session_Cmd_pl_union_type_t, 8)
#define DCAL_session_Cmd_pl_NONE ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(0))
#define DCAL_session_Cmd_pl_Globals ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(1))
#define DCAL_session_Cmd_pl_Profile ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(2))
#define DCAL_session_Cmd_pl_Interface ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(3))
#define DCAL_session_Cmd_pl_Lease ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(4))
#define DCAL_session_Cmd_pl_Default_route ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(5))
#define DCAL_session_Cmd_pl_U32 ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(6))
#define DCAL_session_Cmd_pl_String ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(7))
#define DCAL_session_Cmd_pl_Time ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(8))
#define DCAL_session_Cmd_pl_Filexfer ((DCAL_session_Cmd_pl_union_type_t)UINT8_C(9))

static inline const char *DCAL_session_Cmd_pl_type_name(DCAL_session_Cmd_pl_union_type_t type)
{
    switch (type) {
    case DCAL_session_Cmd_pl_NONE: return "NONE";
    case DCAL_session_Cmd_pl_Globals: return "Globals";
    case DCAL_session_Cmd_pl_Profile: return "Profile";
    case DCAL_session_Cmd_pl_Interface: return "Interface";
    case DCAL_session_Cmd_pl_Lease: return "Lease";
    case DCAL_session_Cmd_pl_Default_route: return "Default_route";
    case DCAL_session_Cmd_pl_U32: return "U32";
    case DCAL_session_Cmd_pl_String: return "String";
    case DCAL_session_Cmd_pl_Time: return "Time";
    case DCAL_session_Cmd_pl_Filexfer: return "Filexfer";
    default: return "";
    }
}


struct DCAL_session_Command_table { uint8_t unused__; };

#ifndef DCAL_session_Command_identifier
#define DCAL_session_Command_identifier flatbuffers_identifier
#endif
#define DCAL_session_Command_type_hash ((flatbuffers_thash_t)0x60a0c1fc)
#define DCAL_session_Command_type_identifier "\xfc\xc1\xa0\x60"
static inline size_t DCAL_session_Command_vec_len(DCAL_session_Command_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Command_table_t DCAL_session_Command_vec_at(DCAL_session_Command_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Command_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Command)

__flatbuffers_define_scalar_field(0, DCAL_session_Command, command, DCAL_session_Commands, DCAL_session_Commands_enum_t, UINT32_C(0))
__flatbuffers_define_union_field(2, DCAL_session_Command, cmd_pl, 0)

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* DCAL_READER_H */
