#ifndef DCAL_READER_H
#define DCAL_READER_H

/* Generated by flatcc 0.3.3 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef alignas
#include <stdalign.h>
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct DCAL_session_Handshake_table *DCAL_session_Handshake_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Handshake_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Handshake_mutable_vec_t;
typedef const struct DCAL_session_Status_table *DCAL_session_Status_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Status_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Status_mutable_vec_t;
typedef const struct DCAL_session_Command_table *DCAL_session_Command_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Command_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Command_mutable_vec_t;
typedef const struct DCAL_session_Payload_table *DCAL_session_Payload_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Payload_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Payload_mutable_vec_t;

typedef uint32_t DCAL_session_Magic_enum_t;
__flatbuffers_define_integer_type(DCAL_session_Magic, DCAL_session_Magic_enum_t, 32)
#define DCAL_session_Magic_INVALID ((DCAL_session_Magic_enum_t)0UL)
#define DCAL_session_Magic_HELLO ((DCAL_session_Magic_enum_t)123UL)
#define DCAL_session_Magic_NACK ((DCAL_session_Magic_enum_t)404UL)
#define DCAL_session_Magic_ACK ((DCAL_session_Magic_enum_t)555UL)

static inline const char *DCAL_session_Magic_name(DCAL_session_Magic_enum_t value)
{
    switch (value) {
    case DCAL_session_Magic_INVALID: return "INVALID";
    case DCAL_session_Magic_HELLO: return "HELLO";
    case DCAL_session_Magic_NACK: return "NACK";
    case DCAL_session_Magic_ACK: return "ACK";
    default: return "";
    }
}

typedef uint32_t DCAL_session_Commands_enum_t;
__flatbuffers_define_integer_type(DCAL_session_Commands, DCAL_session_Commands_enum_t, 32)
#define DCAL_session_Commands_INVALID ((DCAL_session_Commands_enum_t)0UL)
#define DCAL_session_Commands_GETSTATUS ((DCAL_session_Commands_enum_t)1UL)

static inline const char *DCAL_session_Commands_name(DCAL_session_Commands_enum_t value)
{
    switch (value) {
    case DCAL_session_Commands_INVALID: return "INVALID";
    case DCAL_session_Commands_GETSTATUS: return "GETSTATUS";
    default: return "";
    }
}



struct DCAL_session_Handshake_table { uint8_t unused__; };

#ifndef DCAL_session_Handshake_identifier
#define DCAL_session_Handshake_identifier flatbuffers_identifier
#endif
#define DCAL_session_Handshake_type_hash ((flatbuffers_thash_t)0xe7ee4310)
#define DCAL_session_Handshake_type_identifier "\x10\x43\xee\xe7"
static inline size_t DCAL_session_Handshake_vec_len(DCAL_session_Handshake_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Handshake_table_t DCAL_session_Handshake_vec_at(DCAL_session_Handshake_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Handshake_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Handshake)

static inline flatbuffers_bool_t DCAL_session_Handshake_server(DCAL_session_Handshake_table_t t)
__flatbuffers_scalar_field(flatbuffers_bool, 0, 0, t)
static inline int DCAL_session_Handshake_server_is_present(DCAL_session_Handshake_table_t t)
__flatbuffers_field_present(0, t)

static inline DCAL_session_Magic_enum_t DCAL_session_Handshake_magic(DCAL_session_Handshake_table_t t)
__flatbuffers_scalar_field(DCAL_session_Magic, 1, 0, t)
static inline int DCAL_session_Handshake_magic_is_present(DCAL_session_Handshake_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_string_t DCAL_session_Handshake_ip(DCAL_session_Handshake_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 2, t, 0)
static inline int DCAL_session_Handshake_ip_is_present(DCAL_session_Handshake_table_t t)
__flatbuffers_field_present(2, t)

static inline uint32_t DCAL_session_Handshake_api_level(DCAL_session_Handshake_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 3, 0, t)
static inline int DCAL_session_Handshake_api_level_is_present(DCAL_session_Handshake_table_t t)
__flatbuffers_field_present(3, t)


struct DCAL_session_Status_table { uint8_t unused__; };

#ifndef DCAL_session_Status_identifier
#define DCAL_session_Status_identifier flatbuffers_identifier
#endif
#define DCAL_session_Status_type_hash ((flatbuffers_thash_t)0xa5becae9)
#define DCAL_session_Status_type_identifier "\xe9\xca\xbe\xa5"
static inline size_t DCAL_session_Status_vec_len(DCAL_session_Status_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Status_table_t DCAL_session_Status_vec_at(DCAL_session_Status_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Status_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Status)

static inline uint32_t DCAL_session_Status_cardState(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 0, 0, t)
static inline int DCAL_session_Status_cardState_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(0, t)

static inline flatbuffers_string_t DCAL_session_Status_ProfileName(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 1, t, 0)
static inline int DCAL_session_Status_ProfileName_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_uint8_vec_t DCAL_session_Status_ssid(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_uint8_vec_t, 2, t, 0)
static inline int DCAL_session_Status_ssid_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(2, t)

static inline uint32_t DCAL_session_Status_ssid_len(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 3, 0, t)
static inline int DCAL_session_Status_ssid_len_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(3, t)

static inline uint32_t DCAL_session_Status_channel(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 4, 0, t)
static inline int DCAL_session_Status_channel_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(4, t)

static inline int32_t DCAL_session_Status_rssi(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_int32, 5, 0, t)
static inline int DCAL_session_Status_rssi_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(5, t)

static inline flatbuffers_string_t DCAL_session_Status_clientName(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 6, t, 0)
static inline int DCAL_session_Status_clientName_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(6, t)

static inline flatbuffers_uint8_vec_t DCAL_session_Status_mac(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_uint8_vec_t, 7, t, 0)
static inline int DCAL_session_Status_mac_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(7, t)

static inline flatbuffers_uint8_vec_t DCAL_session_Status_ip(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_uint8_vec_t, 8, t, 0)
static inline int DCAL_session_Status_ip_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(8, t)

static inline flatbuffers_string_vec_t DCAL_session_Status_ipv6(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_vec_t, 9, t, 0)
static inline int DCAL_session_Status_ipv6_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(9, t)

static inline flatbuffers_uint8_vec_t DCAL_session_Status_AP_mac(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_uint8_vec_t, 10, t, 0)
static inline int DCAL_session_Status_AP_mac_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(10, t)

static inline flatbuffers_uint8_vec_t DCAL_session_Status_AP_ip(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_uint8_vec_t, 11, t, 0)
static inline int DCAL_session_Status_AP_ip_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(11, t)

static inline flatbuffers_string_t DCAL_session_Status_AP_name(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 12, t, 0)
static inline int DCAL_session_Status_AP_name_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(12, t)

static inline uint32_t DCAL_session_Status_bitRate(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 13, 0, t)
static inline int DCAL_session_Status_bitRate_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(13, t)

static inline uint32_t DCAL_session_Status_txPower(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 14, 0, t)
static inline int DCAL_session_Status_txPower_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(14, t)

static inline uint32_t DCAL_session_Status_dtim(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 15, 0, t)
static inline int DCAL_session_Status_dtim_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(15, t)

static inline uint32_t DCAL_session_Status_beaconPeriod(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 16, 0, t)
static inline int DCAL_session_Status_beaconPeriod_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(16, t)


struct DCAL_session_Command_table { uint8_t unused__; };

#ifndef DCAL_session_Command_identifier
#define DCAL_session_Command_identifier flatbuffers_identifier
#endif
#define DCAL_session_Command_type_hash ((flatbuffers_thash_t)0x60a0c1fc)
#define DCAL_session_Command_type_identifier "\xfc\xc1\xa0\x60"
static inline size_t DCAL_session_Command_vec_len(DCAL_session_Command_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Command_table_t DCAL_session_Command_vec_at(DCAL_session_Command_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Command_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Command)

static inline DCAL_session_Commands_enum_t DCAL_session_Command_command(DCAL_session_Command_table_t t)
__flatbuffers_scalar_field(DCAL_session_Commands, 0, 0, t)
static inline int DCAL_session_Command_command_is_present(DCAL_session_Command_table_t t)
__flatbuffers_field_present(0, t)

typedef uint8_t DCAL_session_Any_union_type_t;
__flatbuffers_define_integer_type(DCAL_session_Any, DCAL_session_Any_union_type_t, 8)
#define DCAL_session_Any_NONE ((DCAL_session_Any_union_type_t)0U)
#define DCAL_session_Any_Handshake ((DCAL_session_Any_union_type_t)1U)
#define DCAL_session_Any_Command ((DCAL_session_Any_union_type_t)2U)
#define DCAL_session_Any_Status ((DCAL_session_Any_union_type_t)3U)

static inline const char *DCAL_session_Any_type_name(DCAL_session_Any_union_type_t type)
{
    switch (type) {
    case DCAL_session_Any_NONE: return "NONE";
    case DCAL_session_Any_Handshake: return "Handshake";
    case DCAL_session_Any_Command: return "Command";
    case DCAL_session_Any_Status: return "Status";
    default: return "";
    }
}


struct DCAL_session_Payload_table { uint8_t unused__; };

#ifndef DCAL_session_Payload_identifier
#define DCAL_session_Payload_identifier flatbuffers_identifier
#endif
#define DCAL_session_Payload_type_hash ((flatbuffers_thash_t)0x30defbef)
#define DCAL_session_Payload_type_identifier "\xef\xfb\xde\x30"
static inline size_t DCAL_session_Payload_vec_len(DCAL_session_Payload_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Payload_table_t DCAL_session_Payload_vec_at(DCAL_session_Payload_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DCAL_session_Payload_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Payload)

static inline DCAL_session_Any_union_type_t DCAL_session_Payload_message_type(DCAL_session_Payload_table_t t)
__flatbuffers_scalar_field(DCAL_session_Any, 0, 0, t)
static inline flatbuffers_generic_table_t DCAL_session_Payload_message(DCAL_session_Payload_table_t t)
__flatbuffers_table_field(flatbuffers_generic_table_t, 1, t, 0)
static inline int DCAL_session_Payload_message_is_present(DCAL_session_Payload_table_t t)
__flatbuffers_field_present(0, t)


#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* DCAL_H */
