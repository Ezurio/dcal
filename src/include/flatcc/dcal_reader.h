#ifndef DCAL_READER_H
#define DCAL_READER_H

/* Generated by flatcc 0.2.0 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef alignas
#include <stdalign.h>
#endif
#if defined __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-variable"
#endif
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct DCAL_session_Handshake_table *DCAL_session_Handshake_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Handshake_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Handshake_mutable_vec_t;
typedef const struct DCAL_session_Status_table *DCAL_session_Status_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Status_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Status_mutable_vec_t;
typedef const struct DCAL_session_Command_table *DCAL_session_Command_table_t;
typedef const flatbuffers_uoffset_t *DCAL_session_Command_vec_t;
typedef flatbuffers_uoffset_t *DCAL_session_Command_mutable_vec_t;

typedef uint32_t DCAL_session_Magic_enum_t;
__flatbuffers_define_integer_type(DCAL_session_Magic, DCAL_session_Magic_enum_t, 32)
static const DCAL_session_Magic_enum_t DCAL_session_Magic_INVALID = 0UL;
static const DCAL_session_Magic_enum_t DCAL_session_Magic_HELLO = 123UL;
static const DCAL_session_Magic_enum_t DCAL_session_Magic_NACK = 404UL;
static const DCAL_session_Magic_enum_t DCAL_session_Magic_ACK = 555UL;

static inline const char *DCAL_session_Magic_name(DCAL_session_Magic_enum_t value)
{
    switch (value) {
    case 0: return "INVALID";
    case 123: return "HELLO";
    case 404: return "NACK";
    case 555: return "ACK";
    default: return "";
    }
}

typedef uint32_t DCAL_session_Commands_enum_t;
__flatbuffers_define_integer_type(DCAL_session_Commands, DCAL_session_Commands_enum_t, 32)
static const DCAL_session_Commands_enum_t DCAL_session_Commands_INVALID = 0UL;
static const DCAL_session_Commands_enum_t DCAL_session_Commands_GETSTATUS = 1UL;

static inline const char *DCAL_session_Commands_name(DCAL_session_Commands_enum_t value)
{
    switch (value) {
    case 0: return "INVALID";
    case 1: return "GETSTATUS";
    default: return "";
    }
}



struct DCAL_session_Handshake_table { uint8_t unused__; };

#ifndef DCAL_session_Handshake_identifier
#define DCAL_session_Handshake_identifier flatbuffers_identifier
#endif
static inline flatbuffers_uoffset_t DCAL_session_Handshake_vec_len(DCAL_session_Handshake_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Handshake_table_t DCAL_session_Handshake_vec_at(DCAL_session_Handshake_vec_t vec, flatbuffers_uoffset_t i)
__flatbuffers_offset_vec_at(DCAL_session_Handshake_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Handshake)

static inline flatbuffers_bool_t DCAL_session_Handshake_server(DCAL_session_Handshake_table_t t)
__flatbuffers_scalar_field(flatbuffers_bool, 0, 0, t)
static inline int DCAL_session_Handshake_server_is_present(DCAL_session_Handshake_table_t t)
__flatbuffers_field_present(0, t)

static inline DCAL_session_Magic_enum_t DCAL_session_Handshake_magic(DCAL_session_Handshake_table_t t)
__flatbuffers_scalar_field(DCAL_session_Magic, 1, 0, t)
static inline int DCAL_session_Handshake_magic_is_present(DCAL_session_Handshake_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_string_t DCAL_session_Handshake_ip(DCAL_session_Handshake_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 2, t, 0)
static inline int DCAL_session_Handshake_ip_is_present(DCAL_session_Handshake_table_t t)
__flatbuffers_field_present(2, t)


struct DCAL_session_Status_table { uint8_t unused__; };

#ifndef DCAL_session_Status_identifier
#define DCAL_session_Status_identifier flatbuffers_identifier
#endif
static inline flatbuffers_uoffset_t DCAL_session_Status_vec_len(DCAL_session_Status_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Status_table_t DCAL_session_Status_vec_at(DCAL_session_Status_vec_t vec, flatbuffers_uoffset_t i)
__flatbuffers_offset_vec_at(DCAL_session_Status_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Status)

static inline uint32_t DCAL_session_Status_cardState(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 0, 0, t)
static inline int DCAL_session_Status_cardState_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(0, t)

static inline flatbuffers_string_t DCAL_session_Status_ProfileName(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 1, t, 0)
static inline int DCAL_session_Status_ProfileName_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_string_t DCAL_session_Status_ssid(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 2, t, 0)
static inline int DCAL_session_Status_ssid_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(2, t)

static inline uint32_t DCAL_session_Status_channel(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 3, 0, t)
static inline int DCAL_session_Status_channel_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(3, t)

static inline int32_t DCAL_session_Status_rssi(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_int32, 4, 0, t)
static inline int DCAL_session_Status_rssi_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(4, t)

static inline flatbuffers_string_t DCAL_session_Status_clientName(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 5, t, 0)
static inline int DCAL_session_Status_clientName_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(5, t)

static inline flatbuffers_string_t DCAL_session_Status_mac(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 6, t, 0)
static inline int DCAL_session_Status_mac_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(6, t)

static inline flatbuffers_string_t DCAL_session_Status_ip(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 7, t, 0)
static inline int DCAL_session_Status_ip_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(7, t)

static inline flatbuffers_string_vec_t DCAL_session_Status_ipv6(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_vec_t, 8, t, 0)
static inline int DCAL_session_Status_ipv6_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(8, t)

static inline flatbuffers_string_t DCAL_session_Status_AP_mac(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 9, t, 0)
static inline int DCAL_session_Status_AP_mac_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(9, t)

static inline flatbuffers_string_t DCAL_session_Status_AP_ip(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 10, t, 0)
static inline int DCAL_session_Status_AP_ip_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(10, t)

static inline flatbuffers_string_t DCAL_session_Status_AP_name(DCAL_session_Status_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 11, t, 0)
static inline int DCAL_session_Status_AP_name_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(11, t)

static inline uint32_t DCAL_session_Status_bitRate(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 12, 0, t)
static inline int DCAL_session_Status_bitRate_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(12, t)

static inline uint32_t DCAL_session_Status_txPower(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 13, 0, t)
static inline int DCAL_session_Status_txPower_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(13, t)

static inline uint32_t DCAL_session_Status_dtim(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 14, 0, t)
static inline int DCAL_session_Status_dtim_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(14, t)

static inline uint32_t DCAL_session_Status_beaconPeriod(DCAL_session_Status_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 15, 0, t)
static inline int DCAL_session_Status_beaconPeriod_is_present(DCAL_session_Status_table_t t)
__flatbuffers_field_present(15, t)


struct DCAL_session_Command_table { uint8_t unused__; };

#ifndef DCAL_session_Command_identifier
#define DCAL_session_Command_identifier flatbuffers_identifier
#endif
static inline flatbuffers_uoffset_t DCAL_session_Command_vec_len(DCAL_session_Command_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DCAL_session_Command_table_t DCAL_session_Command_vec_at(DCAL_session_Command_vec_t vec, flatbuffers_uoffset_t i)
__flatbuffers_offset_vec_at(DCAL_session_Command_table_t, vec, i, 0)
__flatbuffers_table_as_root(DCAL_session_Command)

static inline DCAL_session_Commands_enum_t DCAL_session_Command_command(DCAL_session_Command_table_t t)
__flatbuffers_scalar_field(DCAL_session_Commands, 0, 0, t)
static inline int DCAL_session_Command_command_is_present(DCAL_session_Command_table_t t)
__flatbuffers_field_present(0, t)

typedef uint8_t DCAL_session_Any_union_type_t;
__flatbuffers_define_integer_type(DCAL_session_Any, DCAL_session_Any_union_type_t, 8)
static const DCAL_session_Any_union_type_t DCAL_session_Any_NONE = 0U;
static const DCAL_session_Any_union_type_t DCAL_session_Any_Handshake = 1U;
static const DCAL_session_Any_union_type_t DCAL_session_Any_Command = 2U;
static const DCAL_session_Any_union_type_t DCAL_session_Any_Status = 3U;

static inline const char *DCAL_session_Any_type_name(DCAL_session_Any_union_type_t type)
{
    switch (type) {
    case 0: return "NONE";
    case 1: return "Handshake";
    case 2: return "Command";
    case 3: return "Status";
    default: return "";
    }
}


#if defined __clang__
#pragma clang diagnostic pop
#elif defined __GNUC__
#pragma GCC diagnostic pop
#endif
#endif /* DCAL_H */
