#ifndef DCAL_VERIFIER_H
#define DCAL_VERIFIER_H

/* Generated by flatcc 0.3.3 FlatBuffers schema compiler for C by dvide.com */

#ifndef DCAL_READER_H
#include "dcal_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"

static int __DCAL_session_Handshake_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __DCAL_session_Status_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __DCAL_session_Command_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __DCAL_session_Payload_table_verifier(flatcc_table_verifier_descriptor_t *td);

static int __DCAL_session_Any_union_verifier(flatcc_table_verifier_descriptor_t *td, flatbuffers_voffset_t id, uint8_t type)
{
    switch(type) {
    case 1: return flatcc_verify_table_field(td, id, 0, __DCAL_session_Handshake_table_verifier);
    case 2: return flatcc_verify_table_field(td, id, 0, __DCAL_session_Command_table_verifier);
    case 3: return flatcc_verify_table_field(td, id, 0, __DCAL_session_Status_table_verifier);
    default: return flatcc_verify_ok;
    }
}

static int __DCAL_session_Handshake_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* server */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* magic */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* ip */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* api_level */)) return ret;
    return flatcc_verify_ok;
}

static inline int DCAL_session_Handshake_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, DCAL_session_Handshake_identifier, &__DCAL_session_Handshake_table_verifier);
}

static inline int DCAL_session_Handshake_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, DCAL_session_Handshake_type_identifier, &__DCAL_session_Handshake_table_verifier);
}

static inline int DCAL_session_Handshake_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__DCAL_session_Handshake_table_verifier);
}

static inline int DCAL_session_Handshake_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{ __flatbuffers_thash_write_to_pe(&thash, thash);
  return flatcc_verify_table_as_root(buf, bufsiz, thash ? (const char *)&thash : 0, &__DCAL_session_Handshake_table_verifier);
}

static int __DCAL_session_Status_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* cardState */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* ProfileName */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 2, 0, 1, 1, 4294967295) /* ssid */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* ssid_len */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* channel */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* rssi */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 6, 0) /* clientName */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 7, 0, 1, 1, 4294967295) /* mac */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 8, 0, 1, 1, 4294967295) /* ip */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 9, 0) /* ipv6 */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 10, 0, 1, 1, 4294967295) /* AP_mac */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 11, 0, 1, 1, 4294967295) /* AP_ip */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 12, 0) /* AP_name */)) return ret;
    if ((ret = flatcc_verify_field(td, 13, 4, 4) /* bitRate */)) return ret;
    if ((ret = flatcc_verify_field(td, 14, 4, 4) /* txPower */)) return ret;
    if ((ret = flatcc_verify_field(td, 15, 4, 4) /* dtim */)) return ret;
    if ((ret = flatcc_verify_field(td, 16, 4, 4) /* beaconPeriod */)) return ret;
    return flatcc_verify_ok;
}

static inline int DCAL_session_Status_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, DCAL_session_Status_identifier, &__DCAL_session_Status_table_verifier);
}

static inline int DCAL_session_Status_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, DCAL_session_Status_type_identifier, &__DCAL_session_Status_table_verifier);
}

static inline int DCAL_session_Status_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__DCAL_session_Status_table_verifier);
}

static inline int DCAL_session_Status_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{ __flatbuffers_thash_write_to_pe(&thash, thash);
  return flatcc_verify_table_as_root(buf, bufsiz, thash ? (const char *)&thash : 0, &__DCAL_session_Status_table_verifier);
}

static int __DCAL_session_Command_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* command */)) return ret;
    return flatcc_verify_ok;
}

static inline int DCAL_session_Command_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, DCAL_session_Command_identifier, &__DCAL_session_Command_table_verifier);
}

static inline int DCAL_session_Command_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, DCAL_session_Command_type_identifier, &__DCAL_session_Command_table_verifier);
}

static inline int DCAL_session_Command_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__DCAL_session_Command_table_verifier);
}

static inline int DCAL_session_Command_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{ __flatbuffers_thash_write_to_pe(&thash, thash);
  return flatcc_verify_table_as_root(buf, bufsiz, thash ? (const char *)&thash : 0, &__DCAL_session_Command_table_verifier);
}

static int __DCAL_session_Payload_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 0, &__DCAL_session_Any_union_verifier) /* message */)) return ret;
    return flatcc_verify_ok;
}

static inline int DCAL_session_Payload_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, DCAL_session_Payload_identifier, &__DCAL_session_Payload_table_verifier);
}

static inline int DCAL_session_Payload_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, DCAL_session_Payload_type_identifier, &__DCAL_session_Payload_table_verifier);
}

static inline int DCAL_session_Payload_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__DCAL_session_Payload_table_verifier);
}

static inline int DCAL_session_Payload_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{ __flatbuffers_thash_write_to_pe(&thash, thash);
  return flatcc_verify_table_as_root(buf, bufsiz, thash ? (const char *)&thash : 0, &__DCAL_session_Payload_table_verifier);
}

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* DCAL_VERIFIER_H */
